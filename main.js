!function(){"use strict";var e=class{constructor(e,t,s,r,i,n,o){this._name=e.name,this._link=e.link,this._id=e._id,this._likes=e.likes,this._cardSelector=s,this._handleCardClick=r,this._handleDeleteClick=i,this._handleLikeClick=n,this._loadingLikeCheck=o,this._userId=t,this._userCardOwnerId=e.owner._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setCardEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this._id)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this._id)})),this._cardImage.addEventListener("click",(()=>{this._handleCardPreview()}))}_handleCardLike(){this._likeButton.classList.toggle("card__like-button_active")}_handleCardPreview(){this._handleCardClick(this._name,this._link)}deleteCard(){this._cardElement.remove(),this._cardElement=null}setLikesCounter(e){this._likes=e,this._cardLikes.textContent=e}addCardLike(){this._likeButton.classList.add("card__like-button_active")}removeCardLike(){this._likeButton.classList.remove("card__like-button_active")}checkCardLikedState(){return!!this._likeButton.classList.contains("card__like-button_active")}getView(){return this._cardElement=this._getTemplate(),this._cardElement.querySelector(".card__name").textContent=this._name,this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._previewButton=this._cardElement.querySelector("#preview-button"),this._cardLikes=this._cardElement.querySelector(".card__likes-counter"),this._loadingLikeCheck(this._likes,this._likeButton),this._cardLikes.textContent=this._likes.length,this._userId!=this._userCardOwnerId&&this._deleteButton.remove(),this._setCardEventListeners(),this._cardElement}},t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_enableSubmitButton(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}_disableSubmitButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}toggleButtonState(){this._hasInvalidInput(this._inputElements)?this._disableSubmitButton():this._enableSubmitButton()}_setEventListeners(){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._buttonElement=this._form.querySelector(this._submitButtonSelector),this.toggleButtonState(),this._form.addEventListener("reset",(()=>{setTimeout((()=>{this.toggleButtonState()}),0)})),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};var s=class{constructor(e){let{popupSelector:t}=e;var s,r,i;s=this,i=e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()},(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="_handleOverlayClose"))in s?Object.defineProperty(s,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):s[r]=i,this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleOverlayClose)}},r=class extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupForm.querySelectorAll(".modal__input"),this._saveButton=this._popupForm.querySelector(".modal__button"),this._handleFormSubmit=t}isLoadingButtonState(e,t){this._saveButton.textContent=e?"Saving...":t}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._popupForm.reset()}};const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__error_input_type",errorClass:"modal__error_visible"},n=document.querySelector(".profile__edit-button"),o=document.querySelector("#profile-edit-modal"),a=document.querySelector(".profile__title"),l=document.querySelector(".profile__description"),d=document.querySelector("#modal-name"),c=document.querySelector("#modal-description"),h=document.querySelector("#card-edit-modal"),u=document.querySelector(".profile__add-button"),_=document.querySelector("#profileimage-edit-modal"),m=document.querySelector(".profile__avatar"),p=document.querySelector(".profile__avatar-edit"),v=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._checkResponse)}getAPIInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}updateProfileInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}deleteUserCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}addCardLikes(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}removeCardLikes(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}updateProfileAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"871cfd79-24b1-469e-9aa3-4e4a6ff58fdc","Content-Type":"application/json"}}),E=new t(i,o),f=new t(i,h),k=new t(i,_);k.enableValidation(),E.enableValidation(),f.enableValidation(),k.enableValidation();const S=new class{constructor(e){let{userName:t,userJob:s,userAvatar:r}=e;this._userName=t,this._userDescription=s,this._userAvatar=r}getUserInfo(){return{name:this._userName.textContent,about:this._userDescription.textContent,avatar:this._userAvatar}}setUserInfo(e){this._userName.textContent=e.name,this._userDescription.textContent=e.about,this._userAvatar.src=e.avatar,this._userAvatar.alt=e.name}}({userName:a,userJob:l,userAvatar:m});n.addEventListener("click",(function(){const{name:e,about:t}=S.getUserInfo();d.value=e,c.value=t,b.open()}));const b=new r("#profile-edit-modal",(e=>{b.isLoadingButtonState(!0),v.updateProfileInfo(e).then((e=>{S.setUserInfo(e),b.close()})).catch((e=>{console.log(e)})).finally((()=>{b.isLoadingButtonState(!1,"Save")}))}));b.setEventListeners();const C=new r("#profileimage-edit-modal",(e=>{C.isLoadingButtonState(!0),v.updateProfileAvatar(e.avatar).then((e=>{S.setUserInfo(e),C.close()})).catch((e=>{console.log(e)})).finally((()=>{C.isLoadingButtonState(!1,"Save")}))}));p.addEventListener("click",(()=>C.open())),C.setEventListeners();const L=new class extends s{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector(".preview-modal__image"),this._previewName=this._popupElement.querySelector(".preview-modal__caption")}open(e,t){this._previewImage.src=t,this._previewImage.alt=e,this._previewName.textContent=e,super.open()}}("#preview-modal");L.setEventListeners();const g=new class extends s{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._confirmButton=document.querySelector("#delete-confirm-button")}setSubmitAction(e){this._handleSubmit=e}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(e=>{e.preventDefault(),this._handleSubmit()}))}}("#delete-confirm-modal");let y,I;function w(t){const s=new e(t,I,"#card-template",((e,t)=>{L.open(e,t)}),(e=>{g.open(),g.setSubmitAction((()=>{v.deleteUserCard(e).then((()=>{s.deleteCard(),g.close()})).catch((e=>{console.log(e)}))}))}),(e=>{s.checkCardLikedState()?v.removeCardLikes(e).then((e=>{s.removeCardLike(),s.setLikesCounter(e.likes.length)})).catch((e=>{console.log(e)})):v.addCardLikes(e).then((e=>{s.addCardLike(),s.setLikesCounter(e.likes.length)})).catch((e=>{console.log(e)}))}),(e=>{e.forEach((e=>{e._id===I&&s.addCardLike()}))}));return s}g.setEventListeners(),v.getAPIInfo().then((e=>{let[t,s]=e;I=t._id,S.setUserInfo(t),y=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:s,renderer:e=>{const t=w(e);y.addItem(t.getView())}},".cards__list"),y.renderItems()})).catch((e=>{console.log(e)}));const B=new r("#card-edit-modal",(e=>{B.isLoadingButtonState(!0),v.addNewCard(e).then((e=>{const t=w(e);B.close(),y.addItem(t.getView())})).catch((e=>{console.log(e)})).finally((()=>{B.isLoadingButtonState(!1,"Create")}))}));u.addEventListener("click",(()=>B.open())),B.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,